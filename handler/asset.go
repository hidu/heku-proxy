// Generated by goasset(1.0 20200404) or "go generate" . DO NOT EDIT.
// https://github.com/hidu/goasset/

package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
	"time"
)

// AssetFile one asset file
type AssetFile interface {
	Name() string
	ModTime() time.Time
	Content() []byte
	ContentGzip() []byte
}

// assetFile asset file  struct
type assetFile struct {
	name        string
	mtime       time.Time
	content     []byte
	contentGzip []byte
}

func (af *assetFile) Name() string {
	return af.name
}
func (af *assetFile) ModTime() time.Time {
	return af.mtime
}

func (af *assetFile) Content() []byte {
	return af.content
}
func (af *assetFile) ContentGzip() []byte {
	return af.contentGzip
}

var _ AssetFile = &assetFile{}

// AssetFiles asset files
type AssetFiles interface {
	GetAssetFile(name string) (AssetFile, error)
	GetContent(name string) []byte
	GetFileNames(dir string) []string

	FileHandlerFunc(name string) http.HandlerFunc
	HTTPHandler(baseDir string) http.Handler
}

// assetFiles asset files
type assetFiles struct {
	Files map[string]*assetFile
}

var _assetDirect bool

var _assetCwd, _ = os.Getwd()

// GetAssetFile get file by name
func (afs *assetFiles) GetAssetFile(name string) (AssetFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assetDirect {
		assetFilePath := filepath.Join(_assetCwd, name)
		f, err := os.Open(assetFilePath)
		log.Println("[goasset] Asset Direct, name=", name, "assetPath=", assetFilePath, "err=", err)

		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}

			helper := newAssetHelper()
			contentNew, errHelper := helper.Execute(assetFilePath, content, "")
			if errHelper != nil {
				return nil, errHelper
			}
			return &assetFile{
				content: contentNew,
				name:    name,
				mtime:   info.ModTime(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := afs.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (afs *assetFiles) GetContent(name string) []byte {
	s, err := afs.GetAssetFile(name)
	if err != nil {
		return []byte("")
	}
	return s.Content()
}

// GetFileNames get all file names
func (afs *assetFiles) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, 0, len(afs.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range afs.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
// 若目录名称 为 *private 则不允许通过web访问
func (afs *assetFiles) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private/") {
		return http.NotFound
	}
	return afs.FileHandlerFuncAll(name)
}

// FileHandlerFuncAll handler http files
// 无 private 目录规则
func (afs *assetFiles) FileHandlerFuncAll(name string) http.HandlerFunc {
	name = filepath.ToSlash(name)
	file, err := afs.GetAssetFile(name)
	return func(writer http.ResponseWriter, req *http.Request) {
		if err != nil {
			http.NotFound(writer, req)
			return
		}
		modifiedSince := req.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && file.ModTime().Before(t) {
				writer.Header().Del("Content-Type")
				writer.Header().Del("Content-Length")
				writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))
				writer.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(file.Name()))
		if mimeType != "" {
			writer.Header().Set("Content-Type", mimeType)
		}
		writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))

		gzipContent := file.ContentGzip()
		var errWrote error
		if len(gzipContent) > 0 && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			writer.Header().Set("Content-Encoding", "gzip")
			_, errWrote = writer.Write(gzipContent)
		} else {
			_, errWrote = writer.Write(file.Content())
		}

		if errWrote != nil {
			log.Printf("[wf] wrote %q with error:%s\n", name, errWrote)
		}
	}
}

// HTTPHandler handler http request
// eg:on file system is :/res/js/a.js and request is /res/js/a.js
// http.Handle("/res/",res.Asset.HttpHandler("/"))

// eg:on file system is :/res/js/a.js and request is /js/a.js
// http.Handle("/js/",res.Asset.HttpHandler("/res/"))
func (afs *assetFiles) HTTPHandler(baseDir string) http.Handler {
	return &_assetFileServer{sf: afs, pdir: baseDir}
}

type _assetFileServer struct {
	sf   *assetFiles
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assetFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	name := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(name).ServeHTTP(w, r)
}

var _ AssetFiles = &assetFiles{}

var _ = flag.String
var _ = runtime.Version()

// ---------------------------helper.go--------begin--------------------------//

func newAssetHelper() *assetHelper {
	helper := &assetHelper{}

	helper.Regs = make(map[string]*regexp.Regexp)
	helper.Regs["remove_above"] = regexp.MustCompile(`[\S\s]*?//\s*asset_remove_above\(\s*\)`)
	helper.Regs["remove"] = regexp.MustCompile(`//\s*asset_remove_start\(\s*\)[\S\s]*?//\s*asset_remove_end\(\s*\)`)
	helper.Regs["include"] = regexp.MustCompile(`//\s*asset_include\(([^)]+?)\)`)

	helper.RegisterFn("remove_above", helper.RemoveAbove)
	helper.RegisterFn("include", helper.Include)
	helper.RegisterFn("remove", helper.Remove)

	return helper
}

type assetHelperFn func(fileName string, content []byte) ([]byte, error)

type assetHelper struct {
	Fns  []map[string]assetHelperFn
	Regs map[string]*regexp.Regexp
}

// RegisterFn 注册helper方法
func (h *assetHelper) RegisterFn(name string, fn assetHelperFn) {
	h.Fns = append(h.Fns, map[string]assetHelperFn{name: fn})
}

// Execute 执行所有的helper方法
func (h *assetHelper) Execute(fileAbsPath string, content []byte, skipFnName string) (contentNew []byte, err error) {
	contentNew = make([]byte, len(content))
	copy(contentNew, content)

	for _, fnInfo := range h.Fns {
		for name, fn := range fnInfo {
			if name == skipFnName {
				continue
			}
			contentNew, err = fn(fileAbsPath, contentNew)
			if err != nil {
				return nil, fmt.Errorf("%s,current file is: %s", err.Error(), fileAbsPath)
			}
		}
	}

	return contentNew, nil
}

// RemoveAbove 删除在此标记之前的内容
// eg: \/\/ asset_remove_above()
func (h *assetHelper) RemoveAbove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove_above"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

// Remove remove 方法, 删除指定区间里的内容
// eg: \/\/asset_remove_start() 中间的内容被删除 \/\/ asset_remove_end()
func (h *assetHelper) Remove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

func (h *assetHelper) include(fileAPath string, content []byte, includeFiles map[string]map[string]bool) (contentNew []byte, err error) {

	fileAPath = filepath.Clean(fileAPath)
	includeFiles[fileAPath] = make(map[string]bool)

	contentNew = h.Regs["include"].ReplaceAllFunc(content, func(matchData []byte) []byte {
		idx := bytes.Index(matchData, []byte("("))
		name := bytes.TrimSpace(matchData[idx+1 : len(matchData)-1])
		if len(name) == 0 {
			err = fmt.Errorf("asset_include with empty param")
			return []byte(err.Error())
		}
		fileBPath := filepath.Join(filepath.Dir(fileAPath), string(name))

		if bFiles, hasB := includeFiles[fileBPath]; hasB {
			if _, hasA := bFiles[fileAPath]; hasA {
				err = fmt.Errorf("asset_include error: cyclic include,%s include(%s)", fileAPath, string(name))
				return []byte(err.Error())
			}
		}
		includeFiles[fileAPath][fileBPath] = true

		includeFiles[fileBPath] = make(map[string]bool)

		bContent, errRead := ioutil.ReadFile(fileBPath)
		if errRead != nil {
			err = errRead
			return []byte(err.Error())
		}

		b1Content, errB1 := h.Execute(fileBPath, bContent, "include")
		if errB1 != nil {
			err = errB1
			return []byte(err.Error())
		}

		cContent, errInclude := h.include(fileBPath, b1Content, includeFiles)
		if errInclude != nil {
			err = errInclude
			return []byte(err.Error())
		}
		return cContent
	})

	if err != nil {
		return nil, err
	}
	return contentNew, nil
}

// Include 将另外一个资源文件包含到当前文件里
// eg: \/\/ asset_include(a.tpl)
func (h *assetHelper) Include(fileAPath string, content []byte) (contentNew []byte, err error) {
	// 用于检查循环include
	includeFiles := make(map[string]map[string]bool)
	return h.include(fileAPath, content, includeFiles)
}

// ---------------------------helper.go--------finish-------------------------//

// Asset export assets
var Asset AssetFiles

func init() {

	// nolint
	var _assetGzipDecode = func(data []byte, fileName string) []byte {
		gzipReader, errGzip := gzip.NewReader(bytes.NewBuffer(data))
		if errGzip != nil {
			panic(fmt.Sprintf("[goasset] gzip decode failed,file=%q, err=%s", fileName, errGzip.Error()))
		}
		defer gzipReader.Close()
		buf, errReader := ioutil.ReadAll(gzipReader)
		if errReader != nil {
			panic(fmt.Sprintf("[goasset] read decode content failed, file=%q err=%s", fileName, errReader.Error()))
		}
		return buf
	}

	// nolint
	var _assetBase64Decode = func(txt string, fileName string) []byte {
		txt = strings.ReplaceAll(txt, "\n", "")
		bf, err := base64.StdEncoding.DecodeString(txt)
		if err != nil {
			panic(fmt.Sprintf("[goasset](%s) base64 decode failed, err=%s", fileName, err.Error()))
		}
		return bf
	}

	asset := &assetFiles{Files: map[string]*assetFile{}}
	Asset = asset

	{
		// 0 mtime: 2017-05-20 20:37:09 , size: 6060
		fileName := "/asset/css/style.css"
		contentBase64 := `
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`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1495283829, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 1 mtime: 2017-05-20 21:04:49 , size: 3228
		fileName := "/asset/favicon.png"
		contentBase64 := `
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
QmCCAAAA//8BAAD//wfkti2cDAAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1495285489, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 2 mtime: 2020-04-04 21:39:00 , size: 1444
		fileName := "/asset/html/index.html"
		contentBase64 := `
H4sIAAAAAAAA/4yUQXPbKhDHz/Kn4HF4vkTBdvISvxTU6bg59NL20M60pw6W1hYTBBRWiv3tO4DUOlN33JPE7u+/LPAH/s/bD5tPXz8+khY7Xc14/BAtzV5Q
MDQGQDbVjHeAktSt9AFQ0B535ZpO4RbRlfC9V4OgX8rPb8qN7ZxEtdVASW0NgkFB3z0KaPZwVrWRdQvlxhr0Vp9oOnko5R7E6r//V4vFghI2qY3sQNBBwbOz
Hk8kz6rBVjQwqBrKNLgiyihUUpehlhrEMraACjVUT4fSeXs4cpbHM66VeSKth52gTIYAyOoQWMCjhus6hNfDkhIPWtAUCi0A0kmW4qq2hhI8OhBUdXIPzJk9
fVlyJ4eIXcdMXBHLmzzjW9scq1nBGzWQWssQBI0Lk8qAJ51U8USKgrfLKZvapifraJeJOClg5LCVPgkLvrO+e5koY4gSWaOyRlBGSQfY2kZQZwNm2Yt6yrge
y723vRuzBU+xcdEIh3geGY7Fy3o613xovdc06wqnZQ2t1Q14QaMhHhiDg+xc3G3bMVoRHpw0I/57B+UWDQmgocZvcHDKQ5KkwChKk85zcn6uLzItoyi4dXEb
yCB1D2K+mFePSUceyHvLWc7+ib5bzKsl6ZTpES6zEV6MdLiEL9eRv/nJXzmvBnl5mps8D2lt7y+x96vIrhJ7saH13W2u3MjjxebvV+tcupHHi5XvFreJvv8r
enwY0t6c4TnLVvg1dNKMnjrj5+gmWvFtj2jNaOfQbzuFk2EnC0bbbdGUDexkrzH9H0Fr+0yrvSX/eun9K85ypWqcN18l1qghX0YWXZiu6xgbv5zld4Cz9Cj/
AAAA//8BAAD//6fF6XCkBQAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1586007540, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

}
