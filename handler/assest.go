// generated by goassest(0.3 20150830)
// https://github.com/hidu/goassest/

package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

// AssestFile assest file  struct
type AssestFile struct {
	Name    string
	Mtime   int64
	Content string
}

// AssestStruct assest files
type AssestStruct struct {
	Files map[string]*AssestFile
}

var _assestDirect bool

func init() {
	exeName := filepath.Base(os.Getenv("_"))
	//only enable with go run
	if exeName == "go" || exeName == "go.exe" {
		flag.BoolVar(&_assestDirect, "assest_direct", false, "for debug,read assest direct")
	}
}

var _assestCwd, _ = os.Getwd()

// GetAssestFile get file by name
func (statics *AssestStruct) GetAssestFile(name string) (*AssestFile, error) {
	name = strings.TrimLeft(path.Clean(name), "/")
	if _assestDirect {
		f, err := os.Open(_assestCwd + "/" + name)
		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}
			return &AssestFile{
				Content: string(content),
				Name:    name,
				Mtime:   info.ModTime().Unix(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := statics.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (statics AssestStruct) GetContent(name string) string {
	s, err := statics.GetAssestFile(name)
	if err != nil {
		return ""
	}
	return s.Content
}

// GetFileNames get all file names
func (statics AssestStruct) GetFileNames(dir string) []string {
	names := make([]string, len(statics.Files))
	for name := range statics.Files {
		names = append(names, name)
	}
	return names
}

// FileHandlerFunc handler http files
func (statics *AssestStruct) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private") {
		return http.NotFound
	}
	static, err := statics.GetAssestFile(name)
	return func(w http.ResponseWriter, r *http.Request) {
		if err != nil {
			http.NotFound(w, r)
			return
		}
		modtime := time.Unix(static.Mtime, 0)
		modifiedSince := r.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && modtime.Before(t.Add(1*time.Second)) {
				w.Header().Del("Content-Type")
				w.Header().Del("Content-Length")
				w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
				w.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(static.Name))
		if mimeType != "" {
			w.Header().Set("Content-Type", mimeType)
		}
		w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
		w.Write([]byte(static.Content))
	}
}

// HTTPHandler handler http request
// eg: http.Handle("/res/",res.Assest.HttpHandler("/res/"))
func (statics *AssestStruct) HTTPHandler(pdir string) http.Handler {
	return &_assestFileServer{sf: statics, pdir: pdir}
}

type _assestFileServer struct {
	sf   *AssestStruct
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assestFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	rname, _ := filepath.Rel(f.pdir, r.URL.Path)
	f.sf.FileHandlerFunc(rname).ServeHTTP(w, r)
}

func _assestGzipBase64decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	gr, _ := gzip.NewReader(bytes.NewBuffer(b))
	bs, _ := ioutil.ReadAll(gr)
	return string(bs)
}

func _assestBase64Decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	return string(b)
}

// Assest export assests
var Assest = &AssestStruct{
	Files: map[string]*AssestFile{

		_assestBase64Decode("YXNzZXRzL2Nzcy9zdHlsZS5jc3M="): &AssestFile{
			Name:    _assestBase64Decode("YXNzZXRzL2Nzcy9zdHlsZS5jc3M="),
			Mtime:   1442845125,
			Content: _assestGzipBase64decode("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"),
		},

		_assestBase64Decode("YXNzZXRzL2h0bWwvaW5kZXguaHRtbA=="): &AssestFile{
			Name:    _assestBase64Decode("YXNzZXRzL2h0bWwvaW5kZXguaHRtbA=="),
			Mtime:   1443585434,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/3RTQY/TPBA9d3+FPx++EybtSkgg4kio7IETHECC48SZ1tY6trEnbfPvseNGm5WgUuVnz7w3M2+U9r/PX4/ff317YppG2z205WAW3FlydLx7YKzVCEMBGY5IwJSGmJAkn+gk3vNtSBMFgb8nc5H8p/jxSRz9GIBMb5Ez5R2hy7wvTxKHM/6TeQSlMVMdRW83vBFuAs4oH999eNzv95w1WwUHI0p+MXgNPtKGdjUDaTngxSgUy+UNM86QASuSAovysLZChix2zzcRor/NbVPvNWaNe2Y64knyBlI2IDUqpSbRbPFtRpxFtJIv96QRqbrXVPsK7P0w38UGc2HKZhnJS59gHEY25iOTdrtdqw9reGmBb3rSh5qykXBw6SFW6q49+Ti+jojyxBkoMt7l9jnLjmk/SB58ojvvlaJxYSJxjn4Ka3jXLo+M5pB9JrwVj2t2kRdq3VddxBQzDBYUam8HjJK/CKUA7i+VRE95/rafiLy710lTP5qXSjmD5b8Y8ASTpQXPaK2/8u7s2f8RYvzYNlWia5tSaR2vyfN1bPOrdjWl+2rpklEXtMKstWwt+14+kD8AAAD//wEAAP//5uDPKTADAAA="),
		},
	},
}
