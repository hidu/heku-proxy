// generated by goassest(0.5.3 20161126)
// https://github.com/hidu/goassest/

package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

// AssestFile assest file  struct
type AssestFile struct {
	Name    string
	Mtime   int64
	Content string
}

// AssestStruct assest files
type AssestStruct struct {
	Files map[string]*AssestFile
}

var _assestDirect bool

func init() {
	exeName := filepath.Base(os.Getenv("_"))
	//only enable with go run
	if exeName == "go" || (runtime.GOOS == "windows" && strings.Contains(os.Args[0], "go-build")) {
		flag.BoolVar(&_assestDirect, "assest_direct", false, "for debug,read assest direct")
	}
}

var _assestCwd, _ = os.Getwd()

// GetAssestFile get file by name
func (statics *AssestStruct) GetAssestFile(name string) (*AssestFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assestDirect {
		f, err := os.Open(filepath.Join(_assestCwd, name))
		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}
			return &AssestFile{
				Content: string(content),
				Name:    name,
				Mtime:   info.ModTime().Unix(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := statics.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (statics AssestStruct) GetContent(name string) string {
	s, err := statics.GetAssestFile(name)
	if err != nil {
		return ""
	}
	return s.Content
}

// GetFileNames get all file names
func (statics AssestStruct) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, len(statics.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range statics.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
func (statics *AssestStruct) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private") {
		return http.NotFound
	}
	name = filepath.ToSlash(name)
	static, err := statics.GetAssestFile(name)
	return func(w http.ResponseWriter, r *http.Request) {
		if err != nil {
			http.NotFound(w, r)
			return
		}
		modtime := time.Unix(static.Mtime, 0)
		modifiedSince := r.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && modtime.Before(t.Add(1*time.Second)) {
				w.Header().Del("Content-Type")
				w.Header().Del("Content-Length")
				w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
				w.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(static.Name))
		if mimeType != "" {
			w.Header().Set("Content-Type", mimeType)
		}
		w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
		w.Write([]byte(static.Content))
	}
}

// HTTPHandler handler http request
//eg:on file system is :/res/js/a.js and request is /res/js/a.js
//http.Handle("/res/",res.Assest.HttpHandler("/"))

//eg:on file system is :/res/js/a.js and request is /js/a.js
//http.Handle("/js/",res.Assest.HttpHandler("/res/"))
func (statics *AssestStruct) HTTPHandler(baseDir string) http.Handler {
	return &_assestFileServer{sf: statics, pdir: baseDir}
}

type _assestFileServer struct {
	sf   *AssestStruct
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assestFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	rname := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(rname).ServeHTTP(w, r)
}

func _assestGzipBase64decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	gr, _ := gzip.NewReader(bytes.NewBuffer(b))
	bs, _ := ioutil.ReadAll(gr)
	return string(bs)
}

func _assestBase64Decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	return string(b)
}

// Assest export assests
var Assest = &AssestStruct{
	Files: map[string]*AssestFile{

		_assestBase64Decode("L2Fzc2V0cy9jc3Mvc3R5bGUuY3Nz"): {
			Name:    _assestBase64Decode("L2Fzc2V0cy9jc3Mvc3R5bGUuY3Nz"),
			Mtime:   1495248261,
			Content: _assestGzipBase64decode("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"),
		},

		_assestBase64Decode("L2Fzc2V0cy9odG1sL2luZGV4Lmh0bWw="): {
			Name:    _assestBase64Decode("L2Fzc2V0cy9odG1sL2luZGV4Lmh0bWw="),
			Mtime:   1495250394,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/4yUTXPTPBDHz+mn2EeHJxeMnLS0pUieYUIPXIADzMCJUexNrKksCWmdJt+ekeVQd6YwziWS9v/b3dkXi/8+fN58/fHlHlrqTHUh0h8YZfeSoWXVBYBoUTXpACA6JAV1q0JEkqynXXHLpqaWyBf4q9cHyb4X394XG9d5RXprkEHtLKElyT7eS2z2+Fdyo+oWi42zFJyZcJ06FmqPcv3m7bosSwZ86sGqDiU7aHz0LtAEe9QNtbLBg66xGC6vQFtNWpki1sqgXJ1TIU0Gq4dj4YM7ngTP92wz2j5AG3AnGVcxIkVex8gjnQy+rmNkENBINtxji0i5ejyXLx23rjmNzhp9gNqoGCVLeSptMUCndCr5YrEQ7epsHlJgk5zaVZZMXFh12KqQ0YXYudA9txTpiYGqSTsrGWfQIbWukcy7SCP3zKO2vqdiH1zvz+aFGB6BTh4lIzymGmd1cl/U537lRvTBMPBG1dg602CQLLX4jnM8qs6nkrmOP/mOXtkXghdbshDRYE0/8eh1wAkyPOdwy2xcvpQR/EGG0jufqgAHZXqUy3JZ3Q8o3MEnJ3i2/gO4LpfVCqDTtiecpU9AOQJxBnGZEYDW9WGG/mad9OusnxPg9vpqjNCo0wz96mZ9O4Zo1GlOhOvyaiBuZhPjTi+ry/JlRvDc78ndKztnflgltj2Rs+Poxn7b6afhTRO2JVs0uFO9oeF8QmPcI6v2Dv4PKoR3gmcX1bOwgjf6UMHklzeQp/HLWzoo8s6fj4LnD4Hgwzf3NwAAAP//AQAA//97DGrPgwUAAA=="),
		},
	},
}
