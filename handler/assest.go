// generated by goassest(0.5.3 20161126)
// https://github.com/hidu/goassest/

package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

// AssestFile assest file  struct
type AssestFile struct {
	Name    string
	Mtime   int64
	Content string
}

// AssestStruct assest files
type AssestStruct struct {
	Files map[string]*AssestFile
}

var _assestDirect bool

func init() {
	exeName := filepath.Base(os.Getenv("_"))
	//only enable with go run
	if exeName == "go" || (runtime.GOOS == "windows" && strings.Contains(os.Args[0], "go-build")) {
		flag.BoolVar(&_assestDirect, "assest_direct", false, "for debug,read assest direct")
	}
}

var _assestCwd, _ = os.Getwd()

// GetAssestFile get file by name
func (statics *AssestStruct) GetAssestFile(name string) (*AssestFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assestDirect {
		f, err := os.Open(filepath.Join(_assestCwd, name))
		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}
			return &AssestFile{
				Content: string(content),
				Name:    name,
				Mtime:   info.ModTime().Unix(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := statics.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (statics AssestStruct) GetContent(name string) string {
	s, err := statics.GetAssestFile(name)
	if err != nil {
		return ""
	}
	return s.Content
}

// GetFileNames get all file names
func (statics AssestStruct) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, len(statics.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range statics.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
func (statics *AssestStruct) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private") {
		return http.NotFound
	}
	name = filepath.ToSlash(name)
	static, err := statics.GetAssestFile(name)
	return func(w http.ResponseWriter, r *http.Request) {
		if err != nil {
			http.NotFound(w, r)
			return
		}
		modtime := time.Unix(static.Mtime, 0)
		modifiedSince := r.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && modtime.Before(t.Add(1*time.Second)) {
				w.Header().Del("Content-Type")
				w.Header().Del("Content-Length")
				w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
				w.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(static.Name))
		if mimeType != "" {
			w.Header().Set("Content-Type", mimeType)
		}
		w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
		w.Write([]byte(static.Content))
	}
}

// HTTPHandler handler http request
//eg:on file system is :/res/js/a.js and request is /res/js/a.js
//http.Handle("/res/",res.Assest.HttpHandler("/"))

//eg:on file system is :/res/js/a.js and request is /js/a.js
//http.Handle("/js/",res.Assest.HttpHandler("/res/"))
func (statics *AssestStruct) HTTPHandler(baseDir string) http.Handler {
	return &_assestFileServer{sf: statics, pdir: baseDir}
}

type _assestFileServer struct {
	sf   *AssestStruct
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assestFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	rname := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(rname).ServeHTTP(w, r)
}

func _assestGzipBase64decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	gr, _ := gzip.NewReader(bytes.NewBuffer(b))
	bs, _ := ioutil.ReadAll(gr)
	return string(bs)
}

func _assestBase64Decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	return string(b)
}

// Assest export assests
var Assest = &AssestStruct{
	Files: map[string]*AssestFile{

		_assestBase64Decode("L2Fzc2VzdC9jc3Mvc3R5bGUuY3Nz"): &AssestFile{
			Name:    _assestBase64Decode("L2Fzc2VzdC9jc3Mvc3R5bGUuY3Nz"),
			Mtime:   1495283829,
			Content: _assestGzipBase64decode("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"),
		},

		_assestBase64Decode("L2Fzc2VzdC9mYXZpY29uLnBuZw=="): &AssestFile{
			Name:    _assestBase64Decode("L2Fzc2VzdC9mYXZpY29uLnBuZw=="),
			Mtime:   1495285489,
			Content: _assestGzipBase64decode("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"),
		},

		_assestBase64Decode("L2Fzc2VzdC9odG1sL2luZGV4Lmh0bWw="): &AssestFile{
			Name:    _assestBase64Decode("L2Fzc2VzdC9odG1sL2luZGV4Lmh0bWw="),
			Mtime:   1495286203,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/4yUQXPbKBTHz/KnYDmsL1GwnWzizYJ2Om4OvbQ9tDPtqYOlZ4sJAgpPiv3tO4DUOq077knivd//8YA/8L9ev9t8+Pz+kbTY6WrG44doafaCgqExALKpZrwDlKRupQ+Agva4K9d0CreIroSvvRoE/VR+fFVubOckqq0GSmprEAwK+uZRQLOHs6qNrFsoN9agt/pE08lDKfcgVv/8u1osFpSwSW1kB4IOCp6d9XgieVYNtqKBQdVQpsEVUUahkroMtdQglrEFVKihejqUztvDkbM8nnGtzBNpPewEZTIECMjqEFjAo4brOoT/hyUlHrSgKRRaAKSTLsVVbQ0leHQgqOrkHpgze/pTzZ0cIncdU3FNLG/zjG9tc6xmBW/UQGotQxA0Lk0qA550UsUzKQreLqdsapyerKRdJuKkgJHDVvokLPjO+u5loowhSmSNyhpBGSUdYGsbQZ0NmGUv6injeiz33vZuzBY8xcZVIxziiWQ4Fi/r6WTzsfVe06wrnJY1tFY34AWNlnhgDA6yc3G7bcdoRXhw0oz4rx2UWzQkgIYav8DBKQ9JkgKjKE06z8n5ub7ItIyi4NbFbSCD1D2I+WJePSYdeSBvLWc5+zv6bjGvlqRTpke4zEZ4MdLhEr5cR/7mO3/lvBrk5Wlu8jyktb2/xN6vIrtK7MWG1ne3uXIjjxebv1+tc+lGHi9WvlvcJvr+j+jxaUh7c4bnLFvhx9BJM3rqjJ+jm2jFtz2iNaOdQ7/tFE6GnSwYbbdFUzawk73G9H8Ere0zrfaW/O2l9/9xlitV47z5KrFGDfkysujCdF3H2PjlLL8DnKVn+RsAAAD//wEAAP//SykQz6YFAAA="),
		},
	},
}
